import { type FC, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAppSelector } from 'store/hooks';
import { ADMIN_ENDPOINTS } from 'constants/endpoints';
import DataTable from '@/components/shared/DataTable';
import HeaderActions from '@/components/shared/HeaderActions';
import { documentColumns, documentActions, formatFileSize, formatDate } from './config';
import Actions from '@/components/shared/Actions';
import { LINKS } from '@/constants/routes';

interface Document {
  id: number;
  title: string;
  description: string;
  category: {
    id: number;
    name: string;
  } | null;
  price: number;
  file_name: string;
  file_type: string;
  file_size: number;
  buy_number: number;
  is_active: boolean;
  created_at: string;
  creator: {
    id: number;
    username: string;
    email: string;
  };
}

const DocumentList: FC = () => {
  const navigate = useNavigate();
  const { token } = useAppSelector((state: any) => state.auth);
  const [documents, setDocuments] = useState<Document[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchDocuments();
    
    // Event listeners for actions
    const handleEditDocument = (event: CustomEvent) => {
      handleEditDocumentAction(event.detail);
    };
    
    const handleToggleStatus = (event: CustomEvent) => {
      handleToggleStatusAction(event.detail.id, event.detail.currentStatus);
    };
    
    const handleDeleteDocument = (event: CustomEvent) => {
      handleDeleteDocumentAction(event.detail);
    };

    window.addEventListener('editDocument', handleEditDocument as EventListener);
    window.addEventListener('toggleDocumentStatus', handleToggleStatus as EventListener);
    window.addEventListener('deleteDocument', handleDeleteDocument as EventListener);

    return () => {
      window.removeEventListener('editDocument', handleEditDocument as EventListener);
      window.removeEventListener('toggleDocumentStatus', handleToggleStatus as EventListener);
      window.removeEventListener('deleteDocument', handleDeleteDocument as EventListener);
    };
  }, []);

  const fetchDocuments = async () => {
    try {
      if (!token) {
        setError('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        setLoading(false);
        return;
      }

      const response = await fetch(ADMIN_ENDPOINTS.GET_DOCUMENTS, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        setDocuments(data.data || []);
        setError(null);
      } else if (response.status === 401) {
        // Handle unauthorized - token expired
        localStorage.removeItem('auth_token');
        navigate(LINKS.loginLink);
      } else {
        const errorData = await response.json().catch(() => ({}));
        setError(errorData.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteDocumentAction = async (id: number) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?')) {
      return;
    }

    try {
      if (!token) {
        alert('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const response = await fetch(`${ADMIN_ENDPOINTS.DELETE_DOCUMENT}/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        // Use functional update to avoid stale closure
        setDocuments(prevDocuments => prevDocuments.filter(doc => doc.id !== id));
        alert('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      } else if (response.status === 401) {
        // Handle unauthorized - token expired
        localStorage.removeItem('auth_token');
        navigate(LINKS.loginLink);
      } else {
        const errorData = await response.json().catch(() => ({}));
        alert(errorData.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    }
  };

  const handleToggleStatusAction = async (id: number, currentStatus: boolean) => {
    try {
      if (!token) {
        alert('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const response = await fetch(`${ADMIN_ENDPOINTS.TOGGLE_DOCUMENT_STATUS}/${id}/toggle-status`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        // Use functional update to avoid stale closure
        setDocuments(prevDocuments => 
          prevDocuments.map(doc => 
            doc.id === id ? { ...doc, is_active: !currentStatus } : doc
          )
        );
        alert(`–î–æ–∫—É–º–µ–Ω—Ç ${!currentStatus ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'} —É—Å–ø–µ—à–Ω–æ`);
      } else if (response.status === 401) {
        // Handle unauthorized - token expired
        localStorage.removeItem('auth_token');
        navigate(LINKS.loginLink);
      } else {
        const errorData = await response.json().catch(() => ({}));
        alert(errorData.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    }
  };

  const handleEditDocumentAction = (document: Document) => {
    // Navigate to upload page with document data for editing
    navigate(LINKS.documentsUploadLink, { 
      state: { 
        editMode: true, 
        documentData: document 
      } 
    });
  };

  const headerActions = (
    <HeaderActions
      onUpload={() => navigate(LINKS.documentsUploadLink)}
      onCategories={() => navigate(LINKS.documentsCategoryLink)}
      uploadLabel="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
      categoriesLabel="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"
    />
  );

  // Custom render functions for columns
  const renderDocumentColumn = (document: Document) => (
    <div>
      <div className="text-sm font-medium text-gray-900 mb-1">
        {document.title}
      </div>
      <div className="text-sm text-gray-500 mb-2">{document.description}</div>
      <div className="text-xs text-gray-400">
        üìÅ {document.file_name} ‚Ä¢ {formatFileSize(document.file_size)}
      </div>
      <div className="text-xs text-gray-400 mt-1">
        üí∞ {document.buy_number} –ø–æ–∫—É–ø–æ–∫ ‚Ä¢ –æ—Ç {document.creator.username}
      </div>
    </div>
  );

  const renderCategoryColumn = (document: Document) => (
    <div className="text-sm text-gray-900">
      {document.category ? document.category.name : "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}
    </div>
  );

  const renderPriceColumn = (document: Document) => (
    <div className="text-sm font-medium text-gray-900">{document.price} ‚Ç∏</div>
  );

  const renderStatusColumn = (document: Document) => (
    <span
      className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
        document.is_active
          ? "bg-green-100 text-green-800"
          : "bg-red-100 text-red-800"
      }`}
    >
      {document.is_active ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
    </span>
  );

  const renderCreatedAtColumn = (document: Document) => (
    <div className="text-sm text-gray-500">
      {formatDate(document.created_at)}
    </div>
  );

  const renderActionsColumn = (document: Document) => (
    <Actions
      onEdit={() => {
        window.dispatchEvent(
          new CustomEvent("editDocument", { detail: document }),
        );
      }}
      onToggleStatus={() => {
        window.dispatchEvent(
          new CustomEvent("toggleDocumentStatus", {
            detail: { id: document.id, currentStatus: document.is_active },
          }),
        );
      }}
      onDelete={() => {
        window.dispatchEvent(
          new CustomEvent("deleteDocument", { detail: document.id }),
        );
      }}
      isActive={document.is_active}
      editLabel="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
      deleteLabel="–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
    />
  );

  // Enhanced columns with render functions
  const enhancedColumns = documentColumns.map(column => ({
    ...column,
    render: column.key === 'document' ? renderDocumentColumn :
            column.key === 'category' ? renderCategoryColumn :
            column.key === 'price' ? renderPriceColumn :
            column.key === 'status' ? renderStatusColumn :
            column.key === 'created_at' ? renderCreatedAtColumn :
            undefined
  }));

  // Enhanced actions with render function
  const enhancedActions = documentActions.map(action => ({
    ...action,
    render: action.key === 'actions' ? renderActionsColumn : undefined
  }));

  return (
    <DataTable
      title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"
      description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
      data={documents}
      columns={enhancedColumns}
      actions={enhancedActions}
      loading={loading}
      error={error}
      emptyMessage="–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
      emptyDescription="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
      totalCount={documents.length}
      headerActions={headerActions}
    />
  );
};

export default DocumentList;
